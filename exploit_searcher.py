#!/usr/bin/env python

import penkraken
import requests
import subprocess
from bs4 import BeautifulSoup
import json

class exp_search:
    def __init__(self,tech):
        self.tech = tech
        self.results = []
        while True:
            x = input(f"{penkraken.colors['green']}\n[1] Searchsploit Utility Implementation\n[2] AutoSearch exploits\n\n{penkraken.colors['blue']}[>] Choose option: {penkraken.colors['reset']}")
            if str(x) != '1' and str(x) != '2':
                print(f"{penkraken.colors['red']}\n[-] Invalid Option{penkraken.colors['reset']}")
            else:
                break
            
        if x == '1':
            self.searchsploit()
        else:
            self.autosearch()
        


    def searchsploit(self):
        while True:
            x = input(f"{penkraken.colors['green']}\n[1] Search\n[2] Inspect exploit\n[3] Download exploit\n\n{penkraken.colors['blue']}[>] Choose option: {penkraken.colors['reset']}")
            if str(x) != '1' and str(x) != '2' and str(x) != '3':
                print(f"{penkraken.colors['red']}\n[-] Invalid Option{penkraken.colors['reset']}")
            else:
                break
        # download
        if x == '3':
            path = input(f"{penkraken.colors['blue']}\n[>] Select exploit path to inspect: (ex: php/webapps/51334.py): {penkraken.colors['reset']}")
            exploit = path.split('/')[-1]
            command = f'searchsploit -m {path}'
            output = subprocess.check_output(command, shell=True)
            for o in output.decode().split('\n'):
                print(f"{penkraken.colors['magenta']}{o}{penkraken.colors['reset']}")

        # Inspect   
        elif x == '2':
            path = input(f"{penkraken.colors['blue']}\n[>] Select exploit path to inspect: (ex: php/webapps/51334.py): {penkraken.colors['reset']}")
            command = f'searchsploit -x {path}'
            output = subprocess.check_output(command, shell=True)
            for o in output.decode().split('\n'):
                print(f"{penkraken.colors['magenta']}{o}{penkraken.colors['reset']}")
        
        # Run with tech
        else:
            command = f'searchsploit {self.tech}'
            output = subprocess.check_output(command, shell=True)
            for o in output.decode().split('\n'):
                print(f"{o}")


    def autosearch(self):
        print(f"\n{penkraken.colors['blue']}[+] Performing an AutoScan on {self.tech} related exploits using PacketStorm, Vulners and CXSecurity...{penkraken.colors['reset']}")
        
        # Packet Storm
        try:
            packet_storm = requests.get(f"https://packetstormsecurity.com/search/?q={self.tech}")
            if packet_storm.status_code == 200:
                self.results.append(f"{penkraken.colors['green']}\n[+] Packet Storm results:\n{penkraken.colors['reset']}")
                print(f"{penkraken.colors['green']}\n[+] Packet Storm Results:\n{penkraken.colors['reset']}")
                soup = BeautifulSoup(packet_storm.text, 'html.parser')
                elements = soup.select('dt a')
                for a in elements:
                    out = f"{penkraken.colors['blue']}Exploit: {penkraken.colors['magenta']}{a.get_text()}{penkraken.colors['reset']}"
                    print(out)
                    self.results.append(out)
            else:
                print(f"{penkraken.colors['red']}\n[-] Status Code: {packet_storm.status_code}")
        except:
            print(f"{penkraken.colors['red']}\n[-] Could not parse exploits from Packet Storm")
        # vulners
        try:
            vulners = requests.get(f"https://vulners.com/api/v3/search/lucene/?query={self.tech}")
            if vulners.status_code == 200:
                self.results.append(f"{penkraken.colors['green']}\n[+] Vulners.com results:\n{penkraken.colors['reset']}")
                print(f"{penkraken.colors['green']}\n[+] Vulners.com Results:\n{penkraken.colors['reset']}")
                data = json.loads(vulners.text)
                index = 0
                for n in range(len(data['data']['search'])):
                    title = data['data']['search'][n]['_source']['title']
                    description = data['data']['search'][n]['_source']['description']
                    out = f"{penkraken.colors['blue']}[+] Title: {penkraken.colors['magenta']}{title}{penkraken.colors['blue']}\n[+] Description: {penkraken.colors['magenta']}{description}{penkraken.colors['reset']}"
                    print(out)
                    self.results.append(out)
            else:
                print(f"{penkraken.colors['red']}\n[-] Status Code: {packet_storm.status_code}")
        except:
            print(f"{penkraken.colors['red']}\n[-] Could not parse exploits from Vulners.com")
        
        # CXSecurity
        try:
            self.results.append(f"{penkraken.colors['green']}\n[+] CXSecurity results:\n{penkraken.colors['reset']}")
            print(f"{penkraken.colors['green']}\n[+] CXSecurity Results:\n{penkraken.colors['reset']}")
            url=f'https://cxsecurity.com/search/wlb/DESC/AND/2024.2.19.1999.1.1/0/10/{self.tech}/'
            s = requests.Session()
            response = s.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            elements = soup.select('TD A')
            for a in elements:
                if self.tech in a.get_text():
                    out = f"{penkraken.colors['blue']}Exploit: {penkraken.colors['magenta']}{a.get_text()}{penkraken.colors['reset']}"
                    print(out)
                    self.results.append(out)
        except:
            print(f"{penkraken.colors['red']}\n[-] Could not parse exploits from CXSecurity")

        try:
            # write Output to a file
            write = input(f"{penkraken.colors['green']}\n[>] Would you like to write the output to a file? (y/n): {penkraken.colors['reset']}")
            if 'y' in str(write).lower():
                file = open(f'Autosearch-results.txt', 'w')
                content = ''.join(str(x)+'\n' for x in self.results)
                file.write(content)
                file.close()
                print(f"{penkraken.colors['green']}\n[+] Output was correctly saved to {penkraken.colors['magenta']}'Autosearch-results.txt'\n{penkraken.colors['reset']}")
              
        except:
            print(f"\n{penkraken.colors['red']}[-] Error while saving output to file{penkraken.colors['reset']}")
        

def Init():
    try:
        print(f"{penkraken.colors['blue']}\n[+] Welcome to the {penkraken.colors['red']}Exploit Searcher{penkraken.colors['blue']} module!\n{penkraken.colors['reset']}")
        tech = input(f"{penkraken.colors['blue']}\n[>] Select the Technology you want to search exploits for (exampel: Joomla)): {penkraken.colors['reset']}")
        tech = exp_search(tech)
        out = ''
        if tech.results:
            for x in tech.results:
                out += x + '\n'
            return out
        else:
            pass

    except:
        print(f"{penkraken.colors['red']}\n[-] Exiting Exploit Searcher Module{penkraken.colors['reset']}")
